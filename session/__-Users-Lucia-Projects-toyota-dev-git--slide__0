let SessionLoad = 1
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
inoremap <Plug>(EmmetExpandAbbr) =emmet#util#closePopup()=emmet#expandAbbr(0,"")<Right>
inoremap <Plug>(EmmetExpandWord) =emmet#util#closePopup()=emmet#expandAbbr(1,"")<Right>
inoremap <Plug>(EmmetBalanceTagInward) :call emmet#balanceTag(1)
inoremap <Plug>(EmmetBalanceTagOutward) :call emmet#balanceTag(-1)
inoremap <Plug>(EmmetMoveNext) :call emmet#moveNextPrev(0)
inoremap <Plug>(EmmetMovePrev) :call emmet#moveNextPrev(1)
inoremap <Plug>(EmmetImageSize) =emmet#util#closePopup()=emmet#imageSize()<Right>
inoremap <Plug>(EmmetToggleComment) =emmet#util#closePopup()=emmet#toggleComment()<Right>
inoremap <Plug>(EmmetSplitJoinTag) :call emmet#splitJoinTag()
inoremap <Plug>(EmmetRemoveTag) =emmet#util#closePopup()=emmet#removeTag()<Right>
inoremap <Plug>(EmmetAnchorizeURL) =emmet#util#closePopup()=emmet#anchorizeURL(0)<Right>
inoremap <Plug>(EmmetAnchorizeSummary) =emmet#util#closePopup()=emmet#anchorizeURL(1)<Right>
inoremap <C-Space> 
inoremap <expr> <Up> pumvisible() ? "\" : "\<Up>"
inoremap <expr> <Down> pumvisible() ? "\" : "\<Down>"
imap <D-BS> 
imap <M-BS> 
imap <M-Down> }
inoremap <D-Down> <C-End>
imap <M-Up> {
inoremap <D-Up> <C-Home>
noremap! <M-Right> <C-Right>
noremap! <D-Right> <End>
noremap! <M-Left> <C-Left>
noremap! <D-Left> <Home>
inoremap <silent> <C-Tab> =UltiSnips_ListSnippets()
inoremap <silent> <Plug>NERDCommenterInsert  <BS>:call NERDComment('i', "insert")
inoremap <silent> <SNR>19_AutoPairsReturn =AutoPairsReturn()
cnoremap <silent> <D-)> 20gt
inoremap <silent> <D-)> 20gt
cnoremap <silent> <D-(> 19gt
inoremap <silent> <D-(> 19gt
cnoremap <silent> <D-*> 18gt
inoremap <silent> <D-*> 18gt
cnoremap <silent> <D-&> 17gt
inoremap <silent> <D-&> 17gt
cnoremap <silent> <D-^> 16gt
inoremap <silent> <D-^> 16gt
cnoremap <silent> <D-%> 15gt
inoremap <silent> <D-%> 15gt
cnoremap <silent> <D-$> 14gt
inoremap <silent> <D-$> 14gt
cnoremap <silent> <D-#> 13gt
inoremap <silent> <D-#> 13gt
cnoremap <silent> <D-@> 12gt
inoremap <silent> <D-@> 12gt
cnoremap <silent> <D-!> 11gt
inoremap <silent> <D-!> 11gt
cnoremap <silent> <D-0> 10gt
inoremap <silent> <D-0> 10gt
cnoremap <silent> <D-9> 9gt
inoremap <silent> <D-9> 9gt
cnoremap <silent> <D-8> 8gt
inoremap <silent> <D-8> 8gt
cnoremap <silent> <D-7> 7gt
inoremap <silent> <D-7> 7gt
cnoremap <silent> <D-6> 6gt
inoremap <silent> <D-6> 6gt
cnoremap <silent> <D-5> 5gt
inoremap <silent> <D-5> 5gt
cnoremap <silent> <D-4> 4gt
inoremap <silent> <D-4> 4gt
cnoremap <silent> <D-3> 3gt
inoremap <silent> <D-3> 3gt
cnoremap <silent> <D-2> 2gt
inoremap <silent> <D-2> 2gt
cnoremap <silent> <D-1> 1gt
inoremap <silent> <D-1> 1gt
map  :NERDTreeToggle
snoremap <silent>  c
xnoremap 	 :call UltiSnips_SaveLastVisualSelection()gvs
snoremap <silent> 	 :call UltiSnips_ExpandSnippetOrJump()
nmap , <Plug>(EmmetExpandAbbr)
vmap , <Plug>(EmmetExpandAbbr)
nmap ; <Plug>(EmmetExpandWord)
nmap d <Plug>(EmmetBalanceTagInward)
vmap d <Plug>(EmmetBalanceTagInward)
nmap D <Plug>(EmmetBalanceTagOutward)
vmap D <Plug>(EmmetBalanceTagOutward)
nmap n <Plug>(EmmetMoveNext)
nmap N <Plug>(EmmetMovePrev)
nmap i <Plug>(EmmetImageSize)
nmap / <Plug>(EmmetToggleComment)
nmap j <Plug>(EmmetSplitJoinTag)
nmap k <Plug>(EmmetRemoveTag)
nmap a <Plug>(EmmetAnchorizeURL)
nmap A <Plug>(EmmetAnchorizeSummary)
vmap m <Plug>(EmmetMergeLines)
vmap c <Plug>(EmmetCodePretty)
nnoremap # #N
nnoremap * *N
xmap S <Plug>VSurround
vmap [% [%m'gv``
nnoremap <silent> \\B :call EasyMotion#WBW(0, 1)
onoremap <silent> \\B :call EasyMotion#WBW(0, 1)
vnoremap <silent> \\B :call EasyMotion#WBW(1, 1)
nnoremap <silent> \\E :call EasyMotion#EW(0, 0)
onoremap <silent> \\E :call EasyMotion#EW(0, 0)
vnoremap <silent> \\E :call EasyMotion#EW(1, 0)
nnoremap <silent> \\F :call EasyMotion#F(0, 1)
onoremap <silent> \\F :call EasyMotion#F(0, 1)
vnoremap <silent> \\F :call EasyMotion#F(1, 1)
nnoremap <silent> \\ge :call EasyMotion#E(0, 1)
onoremap <silent> \\ge :call EasyMotion#E(0, 1)
vnoremap <silent> \\ge :call EasyMotion#E(1, 1)
nnoremap <silent> \\N :call EasyMotion#Search(0, 1)
onoremap <silent> \\N :call EasyMotion#Search(0, 1)
vnoremap <silent> \\N :call EasyMotion#Search(1, 1)
nnoremap <silent> \\T :call EasyMotion#T(0, 1)
onoremap <silent> \\T :call EasyMotion#T(0, 1)
vnoremap <silent> \\T :call EasyMotion#T(1, 1)
nnoremap <silent> \\W :call EasyMotion#WBW(0, 0)
onoremap <silent> \\W :call EasyMotion#WBW(0, 0)
vnoremap <silent> \\W :call EasyMotion#WBW(1, 0)
nnoremap <silent> \\b :call EasyMotion#WB(0, 1)
onoremap <silent> \\b :call EasyMotion#WB(0, 1)
vnoremap <silent> \\b :call EasyMotion#WB(1, 1)
nnoremap <silent> \\e :call EasyMotion#E(0, 0)
onoremap <silent> \\e :call EasyMotion#E(0, 0)
vnoremap <silent> \\e :call EasyMotion#E(1, 0)
nnoremap <silent> \\f :call EasyMotion#F(0, 0)
onoremap <silent> \\f :call EasyMotion#F(0, 0)
vnoremap <silent> \\f :call EasyMotion#F(1, 0)
nnoremap <silent> \\gE :call EasyMotion#EW(0, 1)
onoremap <silent> \\gE :call EasyMotion#EW(0, 1)
vnoremap <silent> \\gE :call EasyMotion#EW(1, 1)
nnoremap <silent> \\j :call EasyMotion#JK(0, 0)
onoremap <silent> \\j :call EasyMotion#JK(0, 0)
vnoremap <silent> \\j :call EasyMotion#JK(1, 0)
nnoremap <silent> \\k :call EasyMotion#JK(0, 1)
onoremap <silent> \\k :call EasyMotion#JK(0, 1)
vnoremap <silent> \\k :call EasyMotion#JK(1, 1)
nnoremap <silent> \\n :call EasyMotion#Search(0, 0)
onoremap <silent> \\n :call EasyMotion#Search(0, 0)
vnoremap <silent> \\n :call EasyMotion#Search(1, 0)
nnoremap <silent> \\t :call EasyMotion#T(0, 0)
onoremap <silent> \\t :call EasyMotion#T(0, 0)
vnoremap <silent> \\t :call EasyMotion#T(1, 0)
nnoremap <silent> \\w :call EasyMotion#WB(0, 0)
onoremap <silent> \\w :call EasyMotion#WB(0, 0)
vnoremap <silent> \\w :call EasyMotion#WB(1, 0)
nnoremap \d :YcmShowDetailedDiagnostic
map <silent> \w :set wrap!
map <silent> \t \be<Down>t
vnoremap <silent> \n :call EasyMotion#Search(1, 0)
onoremap <silent> \n :call EasyMotion#Search(0, 0)
nnoremap <silent> \n :call EasyMotion#Search(0, 0)
vnoremap <silent> \k :call EasyMotion#JK(1, 1)
onoremap <silent> \k :call EasyMotion#JK(0, 1)
nnoremap <silent> \k :call EasyMotion#JK(0, 1)
vnoremap <silent> \j :call EasyMotion#JK(1, 0)
onoremap <silent> \j :call EasyMotion#JK(0, 0)
nnoremap <silent> \j :call EasyMotion#JK(0, 0)
vnoremap <silent> \gE :call EasyMotion#EW(1, 1)
onoremap <silent> \gE :call EasyMotion#EW(0, 1)
nnoremap <silent> \gE :call EasyMotion#EW(0, 1)
vnoremap <silent> \f :call EasyMotion#F(1, 0)
onoremap <silent> \f :call EasyMotion#F(0, 0)
nnoremap <silent> \f :call EasyMotion#F(0, 0)
vnoremap <silent> \e :call EasyMotion#E(1, 0)
onoremap <silent> \e :call EasyMotion#E(0, 0)
nnoremap <silent> \e :call EasyMotion#E(0, 0)
vnoremap <silent> \b :call EasyMotion#WB(1, 1)
onoremap <silent> \b :call EasyMotion#WB(0, 1)
nnoremap <silent> \b :call EasyMotion#WB(0, 1)
vnoremap <silent> \W :call EasyMotion#WBW(1, 0)
onoremap <silent> \W :call EasyMotion#WBW(0, 0)
nnoremap <silent> \W :call EasyMotion#WBW(0, 0)
vnoremap <silent> \T :call EasyMotion#T(1, 1)
onoremap <silent> \T :call EasyMotion#T(0, 1)
nnoremap <silent> \T :call EasyMotion#T(0, 1)
vnoremap <silent> \N :call EasyMotion#Search(1, 1)
onoremap <silent> \N :call EasyMotion#Search(0, 1)
nnoremap <silent> \N :call EasyMotion#Search(0, 1)
vnoremap <silent> \ge :call EasyMotion#E(1, 1)
onoremap <silent> \ge :call EasyMotion#E(0, 1)
nnoremap <silent> \ge :call EasyMotion#E(0, 1)
vnoremap <silent> \F :call EasyMotion#F(1, 1)
onoremap <silent> \F :call EasyMotion#F(0, 1)
nnoremap <silent> \F :call EasyMotion#F(0, 1)
vnoremap <silent> \E :call EasyMotion#EW(1, 0)
onoremap <silent> \E :call EasyMotion#EW(0, 0)
nnoremap <silent> \E :call EasyMotion#EW(0, 0)
vnoremap <silent> \B :call EasyMotion#WBW(1, 1)
onoremap <silent> \B :call EasyMotion#WBW(0, 1)
nnoremap <silent> \B :call EasyMotion#WBW(0, 1)
map <silent> \mm :ShowMarksPlaceMark
map <silent> \ma :ShowMarksClearAll
map <silent> \mh :ShowMarksClearMark
map <silent> \mo :ShowMarksOn
map <silent> \mt :ShowMarksToggle
nmap <silent> \qq :QuickSession
nnoremap \sm :GSessionListLocal
nnoremap \sE :GSessionEliminateAll
nnoremap \se :GSessionEliminateCurrent
nnoremap \sL :NamedSessionLoad
nnoremap \sl :NamedSessionLoadCwd
nnoremap \sN :NamedSessionMake
nnoremap \sn :NamedSessionMakeCwd
nnoremap \sS :GSessionMake
nnoremap \ss :GSessionMakeLocal
map <silent> \p <Plug>PeepOpen
nmap \ca <Plug>NERDCommenterAltDelims
xmap \cu <Plug>NERDCommenterUncomment
nmap \cu <Plug>NERDCommenterUncomment
xmap \cb <Plug>NERDCommenterAlignBoth
nmap \cb <Plug>NERDCommenterAlignBoth
xmap \cl <Plug>NERDCommenterAlignLeft
nmap \cl <Plug>NERDCommenterAlignLeft
nmap \cA <Plug>NERDCommenterAppend
xmap \cy <Plug>NERDCommenterYank
nmap \cy <Plug>NERDCommenterYank
xmap \cs <Plug>NERDCommenterSexy
nmap \cs <Plug>NERDCommenterSexy
xmap \ci <Plug>NERDCommenterInvert
nmap \ci <Plug>NERDCommenterInvert
nmap \c$ <Plug>NERDCommenterToEOL
xmap \cn <Plug>NERDCommenterNested
nmap \cn <Plug>NERDCommenterNested
xmap \cm <Plug>NERDCommenterMinimal
nmap \cm <Plug>NERDCommenterMinimal
xmap \c  <Plug>NERDCommenterToggle
nmap \c  <Plug>NERDCommenterToggle
xmap \cc <Plug>NERDCommenterComment
nmap \cc <Plug>NERDCommenterComment
map <silent> \/ :noh
map <silent> \oo :exe 'silent !open .'
map <silent> \ee :e ~/.vimrc
map <silent> \r :RRB
map <silent> \cv :CSScomb
vmap ]% ]%m'gv``
vmap a% [%v]%
nmap cs <Plug>Csurround
nmap ds <Plug>Dsurround
nmap gx <Plug>NetrwBrowseX
xmap gS <Plug>VgSurround
nmap ySS <Plug>YSsurround
nmap ySs <Plug>YSsurround
nmap yss <Plug>Yssurround
nmap yS <Plug>YSurround
nmap ys <Plug>Ysurround
nnoremap <Plug>(EmmetExpandAbbr) :call emmet#expandAbbr(3,"")
vnoremap <Plug>(EmmetExpandAbbr) :call emmet#expandAbbr(2,"")
nnoremap <Plug>(EmmetExpandWord) :call emmet#expandAbbr(1,"")
nnoremap <Plug>(EmmetBalanceTagInward) :call emmet#balanceTag(1)
vnoremap <Plug>(EmmetBalanceTagInward) :call emmet#balanceTag(2)
nnoremap <Plug>(EmmetBalanceTagOutward) :call emmet#balanceTag(-1)
vnoremap <Plug>(EmmetBalanceTagOutward) :call emmet#balanceTag(-2)
nnoremap <Plug>(EmmetMoveNext) :call emmet#moveNextPrev(0)
nnoremap <Plug>(EmmetMovePrev) :call emmet#moveNextPrev(1)
nnoremap <Plug>(EmmetImageSize) :call emmet#imageSize()
nnoremap <Plug>(EmmetToggleComment) :call emmet#toggleComment()
nnoremap <Plug>(EmmetSplitJoinTag) :call emmet#splitJoinTag()
nnoremap <Plug>(EmmetRemoveTag) :call emmet#removeTag()
nnoremap <Plug>(EmmetAnchorizeURL) :call emmet#anchorizeURL(0)
nnoremap <Plug>(EmmetAnchorizeSummary) :call emmet#anchorizeURL(1)
vnoremap <Plug>(EmmetMergeLines) :call emmet#mergeLines()
vnoremap <Plug>(EmmetCodePretty) :call emmet#codePretty()
nnoremap <silent> <D-)> 20gt
nnoremap <silent> <D-(> 19gt
nnoremap <silent> <D-*> 18gt
nnoremap <silent> <D-&> 17gt
nnoremap <silent> <D-^> 16gt
nnoremap <silent> <D-%> 15gt
nnoremap <silent> <D-$> 14gt
nnoremap <silent> <D-#> 13gt
nnoremap <silent> <D-@> 12gt
nnoremap <silent> <D-!> 11gt
nnoremap <silent> <D-0> 10gt
nnoremap <silent> <D-9> 9gt
nnoremap <silent> <D-8> 8gt
nnoremap <silent> <D-7> 7gt
nnoremap <silent> <D-6> 6gt
nnoremap <silent> <D-5> 5gt
nnoremap <silent> <D-4> 4gt
nnoremap <silent> <D-3> 3gt
nnoremap <silent> <D-2> 2gt
nnoremap <silent> <D-1> 1gt
map <M-Down> }
noremap <D-Down> <C-End>
map <M-Up> {
noremap <D-Up> <C-Home>
noremap <M-Right> <C-Right>
noremap <D-Right> <End>
noremap <M-Left> <C-Left>
noremap <D-Left> <Home>
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)
snoremap <silent> <Del> c
snoremap <silent> <BS> c
snoremap <silent> <C-Tab> :call UltiSnips_ListSnippets()
xnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment("x", "Uncomment")
nnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment("n", "Uncomment")
xnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment("x", "AlignBoth")
nnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment("n", "AlignBoth")
xnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment("x", "AlignLeft")
nnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment("n", "AlignLeft")
nnoremap <silent> <Plug>NERDCommenterAppend :call NERDComment("n", "Append")
xnoremap <silent> <Plug>NERDCommenterYank :call NERDComment("x", "Yank")
nnoremap <silent> <Plug>NERDCommenterYank :call NERDComment("n", "Yank")
xnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment("x", "Sexy")
nnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment("n", "Sexy")
xnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment("x", "Invert")
nnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment("n", "Invert")
nnoremap <silent> <Plug>NERDCommenterToEOL :call NERDComment("n", "ToEOL")
xnoremap <silent> <Plug>NERDCommenterNested :call NERDComment("x", "Nested")
nnoremap <silent> <Plug>NERDCommenterNested :call NERDComment("n", "Nested")
xnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment("x", "Minimal")
nnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment("n", "Minimal")
xnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment("x", "Toggle")
nnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment("n", "Toggle")
xnoremap <silent> <Plug>NERDCommenterComment :call NERDComment("x", "Comment")
nnoremap <silent> <Plug>NERDCommenterComment :call NERDComment("n", "Comment")
nnoremap <silent> <Plug>SurroundRepeat .
vnoremap <silent> <D-)> 20gt
onoremap <silent> <D-)> 20gt
vnoremap <silent> <D-(> 19gt
onoremap <silent> <D-(> 19gt
vnoremap <silent> <D-*> 18gt
onoremap <silent> <D-*> 18gt
vnoremap <silent> <D-&> 17gt
onoremap <silent> <D-&> 17gt
vnoremap <silent> <D-^> 16gt
onoremap <silent> <D-^> 16gt
vnoremap <silent> <D-%> 15gt
onoremap <silent> <D-%> 15gt
vnoremap <silent> <D-$> 14gt
onoremap <silent> <D-$> 14gt
vnoremap <silent> <D-#> 13gt
onoremap <silent> <D-#> 13gt
vnoremap <silent> <D-@> 12gt
onoremap <silent> <D-@> 12gt
vnoremap <silent> <D-!> 11gt
onoremap <silent> <D-!> 11gt
vnoremap <silent> <D-0> 10gt
onoremap <silent> <D-0> 10gt
vnoremap <silent> <D-9> 9gt
onoremap <silent> <D-9> 9gt
vnoremap <silent> <D-8> 8gt
onoremap <silent> <D-8> 8gt
vnoremap <silent> <D-7> 7gt
onoremap <silent> <D-7> 7gt
vnoremap <silent> <D-6> 6gt
onoremap <silent> <D-6> 6gt
vnoremap <silent> <D-5> 5gt
onoremap <silent> <D-5> 5gt
vnoremap <silent> <D-4> 4gt
onoremap <silent> <D-4> 4gt
vnoremap <silent> <D-3> 3gt
onoremap <silent> <D-3> 3gt
vnoremap <silent> <D-2> 2gt
onoremap <silent> <D-2> 2gt
vnoremap <silent> <D-1> 1gt
onoremap <silent> <D-1> 1gt
xmap <BS> "-d
noremap!  <Left>
noremap!  <Right>
imap S <Plug>ISurround
imap s <Plug>Isurround
inoremap <silent> 	 =UltiSnips_ExpandSnippetOrJump()
inoremap <expr>  pumvisible() ? "\" : "\"
inoremap <expr>  pumvisible() ? "\" : "\"
imap  <Plug>Isurround
imap , <Plug>(EmmetExpandAbbr)
imap ; <Plug>(EmmetExpandWord)
imap d <Plug>(EmmetBalanceTagInward)
imap D <Plug>(EmmetBalanceTagOutward)
imap n <Plug>(EmmetMoveNext)
imap N <Plug>(EmmetMovePrev)
imap i <Plug>(EmmetImageSize)
imap / <Plug>(EmmetToggleComment)
imap j <Plug>(EmmetSplitJoinTag)
imap k <Plug>(EmmetRemoveTag)
imap a <Plug>(EmmetAnchorizeURL)
imap A <Plug>(EmmetAnchorizeSummary)
let &cpo=s:cpo_save
unlet s:cpo_save
set autoindent
set background=dark
set backspace=indent,eol,start
set completefunc=youcompleteme#Complete
set completeopt=preview,menuone
set cpoptions=aAceFsB
set expandtab
set fileencodings=ucs-bom,utf-8,default,latin1
set formatoptions=l
set guifont=Monaco:h15
set guitablabel=%M%t
set helplang=en
set hlsearch
set langmenu=none
set mouse=a
set printexpr=system('open\ -a\ Preview\ '.v:fname_in)\ +\ v:shell_error
set runtimepath=~/.vim/bundle/vundle,~/.vim/bundle/YouCompleteMe,~/.vim/bundle/auto-pairs,~/.vim/bundle/vim-surround,~/.vim/bundle/matchit.zip,~/.vim/bundle/vim-csscomb,~/.vim/bundle/browser-refresh.vim,~/.vim/bundle/nerdtree,~/.vim/bundle/nerdcommenter,~/.vim/bundle/ultisnips,~/.vim/bundle/vim-peepopen,~/.vim/bundle/gsession.vim,~/.vim/bundle/quicksession.vim,~/.vim/bundle/ShowMarks7,~/.vim/bundle/EasyMotion,~/.vim/bundle/vundle,~/.vim/bundle/YouCompleteMe,~/.vim/bundle/auto-pairs,~/.vim/bundle/vim-surround,~/.vim/bundle/matchit.zip,~/.vim/bundle/vim-csscomb,~/.vim/bundle/browser-refresh.vim,~/.vim/bundle/nerdtree,~/.vim/bundle/nerdcommenter,~/.vim/bundle/ultisnips,~/.vim/bundle/emmet-vim,~/.vim/bundle/vim-peepopen,~/.vim/bundle/bufexplorer.zip,~/.vim/bundle/gsession.vim,~/.vim/bundle/quicksession.vim,~/.vim/bundle/ShowMarks7,~/.vim,/Applications/MacVim.app/Contents/Resources/vim/vimfiles,/Applications/MacVim.app/Contents/Resources/vim/runtime,/Applications/MacVim.app/Contents/Resources/vim/vimfiles/after,~/.vim/bundle/ult
set shiftwidth=4
set showbreak=\ \ \ \ \ \ \ \ \ \ \ \ 
set showcmd
set softtabstop=4
set tabstop=4
set termencoding=utf-8
set updatetime=2000
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/Projects/toyota/dev
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +9 ~/Projects/toyota/dev/scripts/zones/Index.js
badd +1 ~/Projects/toyota/dev/scripts/panel/Panel.js
badd +523 ~/Projects/toyota/dev/styles/main.less
badd +62 ~/.vimrc
silent! argdel *
edit ~/Projects/toyota/dev/scripts/panel/Panel.js
set splitbelow splitright
set nosplitbelow
set nosplitright
wincmd t
set winheight=1 winwidth=1
argglobal
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <silent> <BS> =AutoPairsDelete()
inoremap <buffer> <silent> î :call AutoPairsJump()a
inoremap <buffer> <silent> <expr> ð AutoPairsToggle()
inoremap <buffer> <silent> â =AutoPairsBackInsert()
inoremap <buffer> <silent> å =AutoPairsFastWrap()
inoremap <buffer> <silent>  =AutoPairsDelete()
inoremap <buffer> <silent>   =AutoPairsSpace()
inoremap <buffer> <silent> " =AutoPairsInsert('"')
inoremap <buffer> <silent> ' =AutoPairsInsert('''')
inoremap <buffer> <silent> ( =AutoPairsInsert('(')
inoremap <buffer> <silent> ) =AutoPairsInsert(')')
noremap <buffer> <silent> î :call AutoPairsJump()
noremap <buffer> <silent> ð :call AutoPairsToggle()
inoremap <buffer> <silent> [ =AutoPairsInsert('[')
inoremap <buffer> <silent> ] =AutoPairsInsert(']')
inoremap <buffer> <silent> ` =AutoPairsInsert('`')
inoremap <buffer> <silent> { =AutoPairsInsert('{')
inoremap <buffer> <silent> } =AutoPairsInsert('}')
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal cindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=j1,J1
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=sO:*\ -,mO:*\ \ ,exO:*/,s1:/*,mb:*,ex:*/,://
setlocal commentstring=//%s
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=youcompleteme#Complete
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'javascript'
setlocal filetype=javascript
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=croql
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
set linebreak
setlocal linebreak
setlocal nolisp
setlocal nolist
setlocal nomacmeta
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=javascriptcomplete#CompleteJS
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'javascript'
setlocal syntax=javascript
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 93 - ((12 * winheight(0) + 13) / 26)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
93
normal! 025|
tabedit ~/Projects/toyota/dev/scripts/zones/Index.js
set splitbelow splitright
set nosplitbelow
set nosplitright
wincmd t
set winheight=1 winwidth=1
argglobal
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <silent> <BS> =AutoPairsDelete()
inoremap <buffer> <silent> î :call AutoPairsJump()a
inoremap <buffer> <silent> <expr> ð AutoPairsToggle()
inoremap <buffer> <silent> â =AutoPairsBackInsert()
inoremap <buffer> <silent> å =AutoPairsFastWrap()
inoremap <buffer> <silent>  =AutoPairsDelete()
inoremap <buffer> <silent>   =AutoPairsSpace()
inoremap <buffer> <silent> " =AutoPairsInsert('"')
inoremap <buffer> <silent> ' =AutoPairsInsert('''')
inoremap <buffer> <silent> ( =AutoPairsInsert('(')
inoremap <buffer> <silent> ) =AutoPairsInsert(')')
noremap <buffer> <silent> î :call AutoPairsJump()
noremap <buffer> <silent> ð :call AutoPairsToggle()
inoremap <buffer> <silent> [ =AutoPairsInsert('[')
inoremap <buffer> <silent> ] =AutoPairsInsert(']')
inoremap <buffer> <silent> ` =AutoPairsInsert('`')
inoremap <buffer> <silent> { =AutoPairsInsert('{')
inoremap <buffer> <silent> } =AutoPairsInsert('}')
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal cindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=j1,J1
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=sO:*\ -,mO:*\ \ ,exO:*/,s1:/*,mb:*,ex:*/,://
setlocal commentstring=//%s
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=youcompleteme#Complete
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'javascript'
setlocal filetype=javascript
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=croql
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255
setlocal keywordprg=
set linebreak
setlocal linebreak
setlocal nolisp
setlocal nolist
setlocal nomacmeta
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=javascriptcomplete#CompleteJS
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'javascript'
setlocal syntax=javascript
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 9 - ((6 * winheight(0) + 13) / 26)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
9
normal! 014|
tabnext 2
if exists('s:wipebuf')
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToO
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
